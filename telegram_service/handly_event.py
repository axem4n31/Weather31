import json

from sqlalchemy.ext.asyncio import AsyncSession
from starlette.status import HTTP_200_OK
from fastapi import Request, HTTPException, Depends
from datetime import datetime, timedelta
from tasks import add

import settings
from models.model_settings import db_helper
from telegram_service.events import start_event, help_event, registration_event, change_region_event, forecast_event, \
    get_coordinates_from_user_event, by_hourly_event

events_with_db = {
    "/start": start_event,
    "–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ üå°Ô∏è": start_event,
    "/forecast": forecast_event,
    "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã üå§Ô∏è": forecast_event,
}
events_without_db = {
    "/help": help_event,
    "–ü–æ–º–æ—â—å üÜò": help_event,
    "/change_region": change_region_event,
    "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏–æ–Ω üåç": change_region_event,
}

# todo –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏–π


async def handle_bot_events(request: Request, secret_key: str,
                            db: AsyncSession = Depends(db_helper.scoped_session_dependency)):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏ –º–µ—Ç–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞
    check_secret_key(secret_key=secret_key)
    check_method(request=request)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    message = await request.json()
    print(message)

    if 'message' in message:
        # –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
        if 'text' in message['message']:
            text = message['message']['text']
            if text in events_with_db:
                await events_with_db[text](message, db=db)
            elif text in events_without_db:
                # await events_without_db[text](message)
                eta_time = datetime.now() + timedelta(minutes=1) - timedelta(hours=3)
                print(eta_time)
                result = add.apply_async(eta=eta_time, kwargs={'message': message})

            else:
                await registration_event(message=message, db=db)

        # –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
        elif 'location' in message['message']:
            await get_coordinates_from_user_event(message, db=db)

    elif 'callback_query' in message and 'data' in message['callback_query']:
        # –ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –µ—Å—Ç—å callback_query —Å –¥–∞–Ω–Ω—ã–º–∏, –≤—ã–∑—ã–≤–∞–µ–º by_hourly_event
        await by_hourly_event(message, db=db)

    return HTTP_200_OK


def check_secret_key(secret_key: str):
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–µ—Ä–∫–µ—Ç–Ω—ã–π –∫–ª—é—á –æ—Ç TELEGRAM WEBHOOK."""
    if secret_key != settings.WEBHOOK_SECRET_KEY:
        raise HTTPException(status_code=401, detail="Unauthorized")


def check_method(request: Request):
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ 'POST'"""
    if request.method != 'POST':
        raise HTTPException(status_code=404, detail="Not found")
